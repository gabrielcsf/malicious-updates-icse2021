"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var getFractionalLength_1 = require("./getFractionalLength");
function isNumericValue(n) {
    return !isNaN(Number(n) - parseFloat(n));
}
function fromBigDec(bigDec) {
    var scale = bigDec.scale, value = bigDec.value;
    if (!isNumericValue(scale) || !isNumericValue(value)) {
        throw new Error('fromBigDec: both scale and value must be numeric. ' +
            ("Instead, " + scale + " and " + value + " were passed"));
    }
    /*
      if scale is less than 0 or greater than 100, we get an exception at toFixed method call.
      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed#Exceptions
    */
    var allowedScale = scale;
    if (allowedScale < -100) {
        allowedScale = -100;
    }
    else if (allowedScale > 100) {
        allowedScale = 100;
    }
    var floatVal = value * Math.pow(10, (-1 * allowedScale));
    return Number(floatVal.toFixed(Math.abs(allowedScale)));
}
exports.fromBigDec = fromBigDec;
function toBigDec(numberRaw) {
    if (!isNumericValue(numberRaw)) {
        throw new Error("Bad value passed to toBigDec: " + numberRaw);
    }
    var number = Number(numberRaw);
    var scale = getFractionalLength_1.getFractionalLength(numberRaw);
    var value;
    if (scale > 0) {
        var withoutSymbols = String(number)
            .split(/[eE]/)[0]
            .replace('.', '');
        value = parseInt(withoutSymbols, 10);
    }
    else {
        value = number;
    }
    return {
        value: value,
        scale: scale
    };
}
exports.toBigDec = toBigDec;
//# sourceMappingURL=bigDecimal.js.map